package bot

import (
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"viget-mvp/internal/matcher"
	"viget-mvp/internal/models"
	"viget-mvp/internal/profile"
	"viget-mvp/internal/vibot"
)

type Handler struct {
	bot         *tgbotapi.BotAPI
	storage     *profile.InMemoryStorage
	interviewer *vibot.Interviewer
	matcher     *matcher.Matcher
}

func NewHandler(bot *tgbotapi.BotAPI, storage *profile.InMemoryStorage,
	interviewer *vibot.Interviewer, matcher *matcher.Matcher) *Handler {
	return &Handler{
		bot:         bot,
		storage:     storage,
		interviewer: interviewer,
		matcher:     matcher,
	}
}

func (h *Handler) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := h.bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			h.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			h.handleCallback(update.CallbackQuery)
		}
	}
}

func (h *Handler) handleMessage(message *tgbotapi.Message) {
	userID := message.From.ID
	text := message.Text

	switch {
	case strings.HasPrefix(text, "/start"):
		h.handleStart(userID)
	case strings.HasPrefix(text, "/profile"):
		h.handleProfile(userID)
	case strings.HasPrefix(text, "/interview"):
		h.handleInterview(userID)
	case strings.HasPrefix(text, "/tasks"):
		h.handleTasks(userID)
	case strings.HasPrefix(text, "/create_task"):
		h.handleCreateTask(userID)
	case strings.HasPrefix(text, "/help"):
		h.handleHelp(userID)
	default:
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω—Ç–µ—Ä–≤—å—é
		if h.interviewer.IsInInterview(userID) {
			h.handleInterviewAnswer(userID, text)
		} else {
			h.sendMessage(userID, "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
		}
	}
}

func (h *Handler) handleStart(userID int64) {
	profile := h.storage.GetUserProfile(strconv.FormatInt(userID, 10))

	var msg string
	if profile == nil {
		msg = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Viget!

–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞—á–∏.

–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é: /interview`
	} else {
		msg = fmt.Sprintf(`üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, %s!

–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: /profile
‚Ä¢ –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏: /tasks
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: /create_task`, profile.Name)
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –ü—Ä–æ–π—Ç–∏ –∏–Ω—Ç–µ—Ä–≤—å—é", "interview"),
			tgbotapi.NewInlineKeyboardButtonData("üéØ –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏", "tasks"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "profile"),
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "create_task"),
		),
	)

	h.sendMessageWithKeyboard(userID, msg, keyboard)
}

func (h *Handler) handleProfile(userID int64) {
	profile := h.storage.GetUserProfile(strconv.FormatInt(userID, 10))

	if profile == nil {
		h.sendMessage(userID, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü—Ä–æ–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é: /interview")
		return
	}

	msg := fmt.Sprintf(`üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üè∑Ô∏è –ò–º—è: %s
üõ†Ô∏è –ù–∞–≤—ã–∫–∏: %s
üí° –ò–Ω—Ç–µ—Ä–µ—Å—ã: %s
üéØ –¶–µ–ª–∏: %s

–°–æ–∑–¥–∞–Ω: %s
–û–±–Ω–æ–≤–ª–µ–Ω: %s`,
		profile.Name,
		h.formatSkills(profile.Skills),
		strings.Join(profile.Interests, ", "),
		strings.Join(profile.Goals, ", "),
		profile.CreatedAt.Format("02.01.2006"),
		profile.UpdatedAt.Format("02.01.2006"))

	h.sendMessage(userID, msg)
}

func (h *Handler) handleInterview(userID int64) {
	err := h.interviewer.StartInterview(userID, "profile")
	if err != nil {
		h.sendMessage(userID, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	question := h.interviewer.GetCurrentQuestion(userID)
	h.sendMessage(userID, question)
}

func (h *Handler) handleInterviewAnswer(userID int64, answer string) {
	nextQuestion, finished, err := h.interviewer.ProcessAnswer(userID, answer)
	if err != nil {
		h.sendMessage(userID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	if finished {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
		profile, err := h.interviewer.ExtractProfile(userID)
		if err != nil {
			h.sendMessage(userID, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}

		h.storage.SaveUserProfile(profile)
		h.sendMessage(userID, "‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –∑–∞–¥–∞—á–∏: /tasks")
	} else {
		h.sendMessage(userID, nextQuestion)
	}
}

func (h *Handler) handleTasks(userID int64) {
	userProfile := h.storage.GetUserProfile(strconv.FormatInt(userID, 10))
	if userProfile == nil {
		h.sendMessage(userID, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: /interview")
		return
	}

	tasks := h.storage.GetAvailableTasks()
	if len(tasks) == 0 {
		h.sendMessage(userID, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ!")
		return
	}

	matches := h.matcher.FindMatchingTasks(userProfile, tasks)

	if len(matches) == 0 {
		h.sendMessage(userID, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")
		return
	}

	msg := "üéØ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
	for i, match := range matches {
		if i >= 5 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5
			break
		}

		task := h.storage.GetTask(match.TaskID)
		msg += fmt.Sprintf("üìã %s\nüí∞ %d ‚ÇΩ\nüéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: %.0f%%\n\n",
			task.Title, task.Budget, match.Score*100)
	}

	h.sendMessage(userID, msg)
}

func (h *Handler) handleCreateTask(userID int64) {
	err := h.interviewer.StartInterview(userID, "task")
	if err != nil {
		h.sendMessage(userID, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	question := h.interviewer.GetCurrentQuestion(userID)
	h.sendMessage(userID, "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n\n"+question)
}

func (h *Handler) handleHelp(userID int64) {
	msg := `ü§ñ Viget - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π

–ö–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/interview - –ü—Ä–æ–π—Ç–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
/tasks - –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏
/create_task - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1Ô∏è‚É£ –ü—Ä–æ–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
2Ô∏è‚É£ –ü–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞–¥–∞—á
3Ô∏è‚É£ –ò–ª–∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @monforje`

	h.sendMessage(userID, msg)
}

func (h *Handler) handleCallback(callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	data := callback.Data

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	h.bot.Send(tgbotapi.NewCallback(callback.ID, ""))

	switch data {
	case "interview":
		h.handleInterview(userID)
	case "tasks":
		h.handleTasks(userID)
	case "profile":
		h.handleProfile(userID)
	case "create_task":
		h.handleCreateTask(userID)
	}
}

func (h *Handler) sendMessage(userID int64, text string) {
	msg := tgbotapi.NewMessage(userID, text)
	msg.ParseMode = tgbotapi.ModeMarkdown
	h.bot.Send(msg)
}

func (h *Handler) sendMessageWithKeyboard(userID int64, text string, keyboard tgbotapi.InlineKeyboardMarkup) {
	msg := tgbotapi.NewMessage(userID, text)
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)
}

func (h *Handler) formatSkills(skills map[string]models.SkillLevel) string {
	if len(skills) == 0 {
		return "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
	}

	var result []string
	for _, skill := range skills {
		verified := ""
		if skill.Verified {
			verified = " ‚úÖ"
		}
		result = append(result, fmt.Sprintf("%s (%d/5)%s", skill.Name, skill.Level, verified))
	}

	return strings.Join(result, ", ")
}
