// internal/bot/handlers.go (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏)
package bot

import (
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"viget-mvp/internal/matcher"
	"viget-mvp/internal/models"
	"viget-mvp/internal/profile"
	"viget-mvp/internal/vibot"
)

type Handler struct {
	bot         *tgbotapi.BotAPI
	storage     *profile.InMemoryStorage
	interviewer *vibot.Interviewer
	matcher     *matcher.Matcher
}

func NewHandler(bot *tgbotapi.BotAPI, storage *profile.InMemoryStorage,
	interviewer *vibot.Interviewer, matcher *matcher.Matcher) *Handler {
	return &Handler{
		bot:         bot,
		storage:     storage,
		interviewer: interviewer,
		matcher:     matcher,
	}
}

func (h *Handler) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := h.bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			h.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			h.handleCallback(update.CallbackQuery)
		}
	}
}

func (h *Handler) handleMessage(message *tgbotapi.Message) {
	userID := message.From.ID
	text := message.Text

	switch {
	case strings.HasPrefix(text, "/start"):
		h.handleStart(userID)
	case strings.HasPrefix(text, "/profile"):
		h.handleProfile(userID)
	case strings.HasPrefix(text, "/interview"):
		h.handleInterview(userID)
	case strings.HasPrefix(text, "/tasks"):
		h.handleTasks(userID)
	case strings.HasPrefix(text, "/create_task"):
		h.handleCreateTask(userID)
	case strings.HasPrefix(text, "/help"):
		h.handleHelp(userID)
	case strings.HasPrefix(text, "/cancel"):
		h.handleCancel(userID)
	default:
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω—Ç–µ—Ä–≤—å—é
		if h.interviewer.IsInInterview(userID) {
			h.handleInterviewAnswer(userID, text)
		} else {
			h.sendMessage(userID, "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
		}
	}
}

func (h *Handler) handleStart(userID int64) {
	profile := h.storage.GetUserProfile(strconv.FormatInt(userID, 10))

	var msg string
	if profile == nil {
		msg = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Viget!

ü§ñ –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞—á–∏.

–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é: /interview`
	} else {
		msg = fmt.Sprintf(`üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, %s!

‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: /profile
‚Ä¢ –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏: /tasks
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: /create_task`, profile.Name)
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë§ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "interview"),
			tgbotapi.NewInlineKeyboardButtonData("üéØ –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏", "tasks"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "profile"),
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "create_task"),
		),
	)

	h.sendMessageWithKeyboard(userID, msg, keyboard)
}

func (h *Handler) handleProfile(userID int64) {
	profile := h.storage.GetUserProfile(strconv.FormatInt(userID, 10))

	if profile == nil {
		h.sendMessage(userID, "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è.\n\nüöÄ –ü—Ä–æ–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é: /interview")
		return
	}

	msg := fmt.Sprintf(`üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**

üè∑Ô∏è **–ò–º—è:** %s
üõ†Ô∏è **–ù–∞–≤—ã–∫–∏:** %s
üí° **–ò–Ω—Ç–µ—Ä–µ—Å—ã:** %s
üéØ **–¶–µ–ª–∏:** %s

üìÖ –°–æ–∑–¥–∞–Ω: %s
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: %s`,
		profile.Name,
		h.formatSkills(profile.Skills),
		strings.Join(profile.Interests, ", "),
		strings.Join(profile.Goals, ", "),
		profile.CreatedAt.Format("02.01.2006"),
		profile.UpdatedAt.Format("02.01.2006"))

	h.sendMessage(userID, msg)
}

func (h *Handler) handleInterview(userID int64) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é
	if h.interviewer.IsInInterview(userID) {
		currentType := h.interviewer.GetInterviewType(userID)
		var typeMsg string
		if currentType == "profile" {
			typeMsg = "—Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
		} else {
			typeMsg = "—Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"
		}
		h.sendMessage(userID, fmt.Sprintf("‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è %s.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.", typeMsg))
		return
	}

	err := h.interviewer.StartInterview(userID, "profile")
	if err != nil {
		h.sendMessage(userID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	question := h.interviewer.GetCurrentQuestion(userID)
	h.sendMessage(userID, question+"\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–Ω—Ç–µ—Ä–≤—å—é")
}

func (h *Handler) handleCreateTask(userID int64) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é
	if h.interviewer.IsInInterview(userID) {
		currentType := h.interviewer.GetInterviewType(userID)
		var typeMsg string
		if currentType == "profile" {
			typeMsg = "—Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
		} else {
			typeMsg = "—Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"
		}
		h.sendMessage(userID, fmt.Sprintf("‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è %s.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.", typeMsg))
		return
	}

	err := h.interviewer.StartInterview(userID, "task")
	if err != nil {
		h.sendMessage(userID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	question := h.interviewer.GetCurrentQuestion(userID)
	h.sendMessage(userID, question+"\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
}

func (h *Handler) handleCancel(userID int64) {
	if !h.interviewer.IsInInterview(userID) {
		h.sendMessage(userID, "‚ùå –í—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏–Ω—Ç–µ—Ä–≤—å—é –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
	interviewType := h.interviewer.GetInterviewType(userID)

	// –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é (–¥–æ–±–∞–≤–∏–º —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ interviewer)
	h.interviewer.CancelInterview(userID)

	var typeMsg string
	if interviewType == "profile" {
		typeMsg = "—Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
	} else {
		typeMsg = "—Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"
	}

	h.sendMessage(userID, fmt.Sprintf("‚ùå –ò–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è %s –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\nüîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", typeMsg))
}

func (h *Handler) handleInterviewAnswer(userID int64, answer string) {
	interviewType := h.interviewer.GetInterviewType(userID)

	nextQuestion, finished, err := h.interviewer.ProcessAnswer(userID, answer)
	if err != nil {
		h.sendMessage(userID, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	if finished {
		switch interviewType {
		case "profile":
			// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
			profile, err := h.interviewer.ExtractProfile(userID)
			if err != nil {
				h.sendMessage(userID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
				return
			}

			h.storage.SaveUserProfile(profile)
			h.sendMessage(userID, "‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.\n\nüéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –∑–∞–¥–∞—á–∏: /tasks")

		case "task":
			// –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
			task, err := h.interviewer.ExtractTask(userID)
			if err != nil {
				h.sendMessage(userID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
				return
			}

			h.storage.SaveTask(task)

			msg := fmt.Sprintf(`‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üìã **%s**
üí∞ –ë—é–¥–∂–µ—Ç: %d ‚ÇΩ
‚è∞ –î–µ–¥–ª–∞–π–Ω: %s

üéØ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É –∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è —É –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.`,
				task.Title,
				task.Budget,
				task.Deadline.Format("02.01.2006"))

			h.sendMessage(userID, msg)
		}
	} else {
		h.sendMessage(userID, nextQuestion+"\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–Ω—Ç–µ—Ä–≤—å—é")
	}
}

func (h *Handler) handleTasks(userID int64) {
	userProfile := h.storage.GetUserProfile(strconv.FormatInt(userID, 10))
	if userProfile == nil {
		h.sendMessage(userID, "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: /interview")
		return
	}

	tasks := h.storage.GetAvailableTasks()
	if len(tasks) == 0 {
		h.sendMessage(userID, "üòî –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ!\n\n‚ûï –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∑–∞–¥–∞—á—É: /create_task")
		return
	}

	matches := h.matcher.FindMatchingTasks(userProfile, tasks)

	if len(matches) == 0 {
		h.sendMessage(userID, "üòï –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: /interview")
		return
	}

	msg := "üéØ **–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:**\n\n"
	for i, match := range matches {
		if i >= 5 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5
			break
		}

		task := h.storage.GetTask(match.TaskID)
		msg += fmt.Sprintf(`üìã **%s**
üí∞ %d ‚ÇΩ
üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: %.0f%%
‚è∞ –î–æ %s

`, task.Title, task.Budget, match.Score*100, task.Deadline.Format("02.01"))
	}

	msg += "\nüí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @monforje"

	h.sendMessage(userID, msg)
}

func (h *Handler) handleHelp(userID int64) {
	msg := `ü§ñ **Viget** - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å  
/interview - –ü—Ä–æ–π—Ç–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
/tasks - –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞—á–∏
/create_task - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1Ô∏è‚É£ –ü—Ä–æ–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
2Ô∏è‚É£ –ü–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞–¥–∞—á
3Ô∏è‚É£ –ò–ª–∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @monforje`

	h.sendMessage(userID, msg)
}

func (h *Handler) handleCallback(callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	data := callback.Data

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	h.bot.Send(tgbotapi.NewCallback(callback.ID, ""))

	switch data {
	case "interview":
		h.handleInterview(userID)
	case "tasks":
		h.handleTasks(userID)
	case "profile":
		h.handleProfile(userID)
	case "create_task":
		h.handleCreateTask(userID)
	}
}

func (h *Handler) sendMessage(userID int64, text string) {
	msg := tgbotapi.NewMessage(userID, text)
	msg.ParseMode = tgbotapi.ModeMarkdown
	h.bot.Send(msg)
}

func (h *Handler) sendMessageWithKeyboard(userID int64, text string, keyboard tgbotapi.InlineKeyboardMarkup) {
	msg := tgbotapi.NewMessage(userID, text)
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)
}

func (h *Handler) formatSkills(skills map[string]models.SkillLevel) string {
	if len(skills) == 0 {
		return "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
	}

	var result []string
	for _, skill := range skills {
		verified := ""
		if skill.Verified {
			verified = " ‚úÖ"
		}
		result = append(result, fmt.Sprintf("%s (%d/5)%s", skill.Name, skill.Level, verified))
	}
	return strings.Join(result, ", ")
}
