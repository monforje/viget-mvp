// internal/vibot/questions.go
package vibot

import (
	"fmt"
	"strings"
)

type QuestionBank struct {
	profileQuestions []QuestionTemplate
	taskQuestions    []QuestionTemplate
}

type QuestionTemplate struct {
	Text     string
	Required bool
	Type     string // "text", "number", "choice"
	Validate func(string) bool
}

func NewQuestionBank() *QuestionBank {
	return &QuestionBank{
		profileQuestions: []QuestionTemplate{
			{
				Text:     "üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
				Required: true,
				Type:     "text",
			},
			{
				Text:     "üíª –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –≤ IT. –ö–∞–∫–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –≤–ª–∞–¥–µ–µ—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python, JavaScript, React)",
				Required: true,
				Type:     "text",
			},
			{
				Text:     "üìä –û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–π –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç 1 –¥–æ 5, –≥–¥–µ:\n1 - –Ω–∞—á–∏–Ω–∞—é—â–∏–π\n2 - –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è\n3 - —É–≤–µ—Ä–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n4 - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π\n5 - —ç–∫—Å–ø–µ—Ä—Ç",
				Required: true,
				Type:     "number",
				Validate: func(s string) bool {
					return strings.Contains("12345", s) && len(s) == 1
				},
			},
			{
				Text:     "üéØ –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ? –ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–µ–ª–∞—Ç—å? (–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –¥–∞–Ω–Ω—ã–µ, –¥–∏–∑–∞–π–Ω –∏ —Ç.–¥.)",
				Required: true,
				Type:     "text",
			},
			{
				Text:     "ü§ù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö –≤ —Ä–∞–±–æ—Ç–µ. –ß—Ç–æ —É –≤–∞—Å –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Å–æ–±–µ–Ω–Ω–æ —Ö–æ—Ä–æ—à–æ?",
				Required: false,
				Type:     "text",
			},
			{
				Text:     "üöÄ –ö–∞–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è?",
				Required: false,
				Type:     "text",
			},
			{
				Text:     "üíº –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏–ª–∏ —Ñ—Ä–∏–ª–∞–Ω—Å–∞? –ï—Å–ª–∏ –¥–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ.",
				Required: false,
				Type:     "text",
			},
		},
		taskQuestions: []QuestionTemplate{
			{
				Text:     "üìù –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ –∑–∞–¥–∞—á–∞? –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
				Required: true,
				Type:     "text",
			},
			{
				Text:     "üìã –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å. –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?",
				Required: true,
				Type:     "text",
			},
			{
				Text:     "üõ†Ô∏è –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –Ω—É–∂–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é? –£–∫–∞–∂–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python - 3/5, React - 2/5)",
				Required: true,
				Type:     "text",
			},
			{
				Text:     "üí∞ –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤—ã –≥–æ—Ç–æ–≤—ã –≤—ã–¥–µ–ª–∏—Ç—å –Ω–∞ —ç—Ç—É –∑–∞–¥–∞—á—É? –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö.",
				Required: true,
				Type:     "number",
			},
			{
				Text:     "‚è∞ –í –∫–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É? –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É.",
				Required: true,
				Type:     "text",
			},
			{
				Text:     "‚≠ê –ï—Å—Ç—å –ª–∏ –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é? (–æ–ø—ã—Ç, –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –æ–±—â–µ–Ω–∏–µ –∏ —Ç.–¥.)",
				Required: false,
				Type:     "text",
			},
		},
	}
}

func (q *QuestionBank) GetQuestion(interviewType string, step int, context map[string]interface{}) string {
	var questions []QuestionTemplate

	switch interviewType {
	case "profile":
		questions = q.profileQuestions
	case "task":
		questions = q.taskQuestions
	default:
		return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–Ω—Ç–µ—Ä–≤—å—é"
	}

	if step >= len(questions) {
		return "‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
	}

	question := questions[step]

	// –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	if len(context) > 0 {
		return q.adaptQuestion(question.Text, step, interviewType, context)
	}

	return question.Text
}

func (q *QuestionBank) GetMaxSteps(interviewType string) int {
	switch interviewType {
	case "profile":
		return len(q.profileQuestions)
	case "task":
		return len(q.taskQuestions)
	default:
		return 0
	}
}

func (q *QuestionBank) adaptQuestion(question string, step int, interviewType string, context map[string]interface{}) string {
	if interviewType == "profile" {
		// –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
		if step == 1 && context["mentioned_skills"] != nil {
			if skills, ok := context["mentioned_skills"].([]interface{}); ok && len(skills) > 0 {
				return fmt.Sprintf("üíª –í—ã —É–ø–æ–º—è–Ω—É–ª–∏ %v. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Å —ç—Ç–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –∏ –æ—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ –∫–∞–∂–¥–æ–π (1-5).", skills)
			}
		}

		if step == 3 && context["experience_level"] != nil {
			level := context["experience_level"].(string)
			switch level {
			case "junior":
				return "üå± –ö–∞–∫ –Ω–∞—á–∏–Ω–∞—é—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∫–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–∏–≤–ª–µ–∫–∞—é—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞?"
			case "senior":
				return "üöÄ –° –≤–∞—à–∏–º –æ–ø—ã—Ç–æ–º, –∫–∞–∫–∏–µ —Å–ª–æ–∂–Ω—ã–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—ã –≥–æ—Ç–æ–≤—ã —Ä–µ—à–∞—Ç—å?"
			}
		}
	} else if interviewType == "task" {
		// –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∑–∞–¥–∞—á–∞—Ö
		if step == 2 && context["task_complexity"] != nil {
			complexity := context["task_complexity"].(string)
			switch complexity {
			case "simple":
				return "üõ†Ô∏è –î–ª—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏ —É–∫–∞–∂–∏—Ç–µ –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: HTML/CSS - 2/5, –±–∞–∑–æ–≤—ã–π JavaScript - 1/5)"
			case "complex":
				return "üîß –î–ª—è —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∞–≤—ã–∫–∞–º –∏ –æ–ø—ã—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: React - 4/5, Node.js - 3/5, –æ–ø—ã—Ç —Å API)"
			}
		}

		if step == 3 && context["mentioned_technologies"] != nil {
			if techs, ok := context["mentioned_technologies"].([]interface{}); ok && len(techs) > 0 {
				return fmt.Sprintf("üí∞ –£—á–∏—Ç—ã–≤–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ %v, –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏? (—É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö)", techs)
			}
		}
	}

	return question
}
